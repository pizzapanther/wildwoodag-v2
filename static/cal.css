.article-time {
  display: none;
}

h2.fc-toolbar-title {
  border-left: 0;
  margin: 0;
  padding: 0;
}

a.fc-list-day-text {
  color: #000;
  font-weight: bold;
  font-size: 120%;
}

.fc .fc-list-event:hover td {
  background-color: rgba(55, 136, 216, 0.5);
}

dialog[open] {
  opacity: 1;
  transform: scaleY(1);
}

dialog {
  opacity: 0;
  transform: scaleY(0);
  transition:
    opacity 0.3s ease-out,
    transform 0.3s ease-out,
    overlay 0.3s ease-out allow-discrete,
    display 0.3s ease-out allow-discrete;
  /* Equivalent to
  transition: all 0.7s allow-discrete; */
  background: var(--body-background);
  color: var(--card-text-color-main);
  width: 80%;
  max-width: 500px;
  height: 320px;
  max-height: 90%;
}

/*   Before-open state  */
/* Needs to be after the previous dialog[open] rule to take effect,
    as the specificity is the same */
@starting-style {
  dialog[open] {
    opacity: 0;
    transform: scaleY(0);
  }
}

/* Transition the :backdrop when the dialog modal is promoted to the top layer */
dialog::backdrop {
  background-color: rgb(0 0 0 / 0);
  transition:
    display 0.3s allow-discrete,
    overlay 0.3s allow-discrete,
    background-color 0.3s;
  /* Equivalent to
  transition: all 0.7s allow-discrete; */
}

dialog[open]::backdrop {
  background-color: rgb(0 0 0 / 0.50);
}

/* This starting-style rule cannot be nested inside the above selector
because the nesting selector cannot represent pseudo-elements. */

@starting-style {
  dialog[open]::backdrop {
    background-color: rgb(0 0 0 / 0);
  }
}

#calendar-js {
  min-height: calc(100vh - 100px);
  max-height: calc(100vh - 100px);
}

.float-butt {
  display: block;
  position: relative;
}

.float-butt a {
  display: block;
  position: absolute;
  margin-top: -50px;
  right: 0;
  z-index: 100;
}
